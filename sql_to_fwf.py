#!/usr/bin/python
import os
import sys
import csv

import argparse
import pandas as pd
import numpy as np

import sqlite3

from tabulate import tabulate

VERSION="1.0"

# For pipe exception error
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE, SIG_DFL)

def convert2fwf(df, args):
    result = ""
    renamedcolumns = []

    # mf = pd.read_fwf('international/population/datas/population_country_preview.fwf',comment='#')

    # Add comments
    result += "# Generated by https://github.com/badele/world-datas-analysis\n"
    result += f"# Version: {VERSION}\n"
    result += f"# Query: {args.query}\n"
    if args.comment:
        for comment in args.comment:
            result += f"# {comment}\n"

    vectors = np.vectorize(len)
    datassize = vectors(df.values.astype(str)).max(axis=0) 
    columnstype = list(df.dtypes)

    columns = list(df.columns)
    columnswidth = np.asarray([len(col) for col in columns])
    

    keepcolumnname= (columnswidth + 2) >= datassize

    # Get collumns size
    text = tabulate(
        df,
        headers=df.columns,
        showindex="never",
        tablefmt='simple'
    )
    line = text.split('\n')[1]
    tabulatesize = line.split('  ')

    colspecs = []
    leftpos = 0
    for column in tabulatesize:
        colsize = len(column)
        rightpos = leftpos+colsize
        colspecs.append([leftpos, rightpos])
        leftpos = rightpos + 2

    # vectors = np.vectorize(len)
    # datassize = vectors(df.values.astype(str)).max(axis=0) 
    # columns = list(df.columns)
    # columnstype = list(df.dtypes)

    # colspecs = []
    # leftpos = 0
    # rightpos = 0

    # truesize = []
    # for idx in range(len(columns)):
    #     nbspaces = max(datassize[idx],len(columns[idx]))
    #     truesize.append(nbspaces)

    #     rightpos = leftpos + nbspaces
    #     colspecs.append([leftpos,rightpos])
    #     leftpos += nbspaces + 2

    result += "\n# columns: " + str(colspecs)
    result += "\n\n"

    # Add datas
    if args.block_by:
        group_by_columns = args.block_by.split(',')
        g = df.groupby(group_by_columns,sort=False)
        lastcolumn = list(g.groups)[-1]
        
        count=0
        for groupname, items in g:
            renamedcolumns = []
            count += 1

            # Set columns size and hide header
            if count<2:
                for idx in range(len(columns)):
                    if keepcolumnname[idx]:
                        renamedcolumns.append(columns[idx]) 
                    else:
                        nbspaces = datassize[idx]-len(columns[idx]) - 2
                        if columnstype[idx] == np.int64 or columnstype[idx] == np.float64:
                            renamedcolumns.append(' '*nbspaces + columns[idx]) 
                        else:         
                            renamedcolumns.append(columns[idx] + ' '*nbspaces)  
            else:
                for idx in range(len(columns)):
                    if keepcolumnname[idx]:
                        renamedcolumns.append(' '*len(columns[idx])) 
                    else:
                        nbspaces = datassize[idx] - 2
                        renamedcolumns.append(' '*nbspaces) 

            text = tabulate(
                items,
                headers=renamedcolumns,
                showindex="never",
                tablefmt='plain'
            )

            # Show comments
            result += f"# {group_by_columns[0]}={groupname}\n"

            # Write datas
            result += text

            if groupname != lastcolumn:
                result += "\n\n\n"
    else:

        text = tabulate(
            df,
            headers=df.columns,
            showindex="never",
            tablefmt='plain'
        )

    

        # Write datas
        result += text


    return result


# Set pandas options
pd.set_option('mode.chained_assignment', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', 1000)

# Argument options
ap = argparse.ArgumentParser()
ap.add_argument("--db",  type=str, help="database")
ap.add_argument("--query",  type=str, help="query")
ap.add_argument("--block-by", type=str,
                help="block by column")

# Output
ap.add_argument("--comment", action='append',
                help="Add comment")
ap.add_argument("--output", type=str,
                help="output filename")
args = ap.parse_args()

# Execute query:
conn = sqlite3.connect(args.db)
with conn:
    df = pd.read_sql_query(args.query, conn)

# Save
if args.output:
    # Fill missing value
    df = df.fillna("?")

    with open(args.output, 'w') as f:

        f.write(convert2fwf(df, args))
else:
    sys.stdout.write((convert2fwf(df, args)))
